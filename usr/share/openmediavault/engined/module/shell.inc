<?php
/**
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Volker Theile <volker.theile@openmediavault.org>
 * @copyright Copyright (c) 2009-2013 Volker Theile
 * @copyright Copyright (c) 2013-2014 OpenMediaVault Plugin Developers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
require_once("openmediavault/module.inc");
require_once("openmediavault/error.inc");
require_once("openmediavault/initscript.inc");

class OMVModuleShell extends OMVModuleServiceAbstract
    implements OMVINotifyListener, OMVIModuleServiceStatus  {

    /**
     * Get the module name.
     */
    public function getName() {
        return "shell";
    }

    /**
     * Defines the modules that if present should build their configuration
     * before the service provided by this module.
     * @return An array of modules.
     */
    public function shouldApply() { return array("certificatemgmt", "nginx"); }

    /**
     * Generate the configuration.
     * @throw E_EXEC_FAILED
     */
    public function applyConfig() {
        $cmd = "omv-mkconf shell 2>&1";
        if(0 !== $this->exec($cmd, $output))
            throw new OMVException(OMVErrorMsg::E_EXEC_FAILED, $cmd, implode("\n", $output));
    }

    /**
     * Start the managed service.
     * @throw E_CONFIG_GET_OBJECT_FAILED
     */
    public function startService() {
        global $xmlConfig;

        $xpath = "//system/shell";
        $object = $xmlConfig->get($xpath);
        if(is_null($object))
            throw new OMVException(OMVErrorMsg::E_CONFIG_GET_OBJECT_FAILED, $xpath);

        if( FALSE === boolval($object['enable']))
            return;

        $initd = new OMVSysVInitScript("shellinabox", TRUE);
        $initd->exec();
    }

    /**
     * Stop the managed service.
     */
    public function stopService() {
        $initd = new OMVSysVInitScript("shellinabox", FALSE);
        $initd->exec();
    }

    /**
     * Get the status of the managed service
     * @throw E_CONFIG_GET_OBJECT_FAILED
     */
    public function getStatus() {
        global $xmlConfig;

        $xpath = "//system/shell";
        $object = $xmlConfig->get($xpath);
        if(is_null($object))
            throw new OMVException(OMVErrorMsg::E_CONFIG_GET_OBJECT_FAILED, $xpath);

        $initd = new OMVSysVInitScript("shellinabox");
        return array(
            "name"    => $this->getName(),
            "title"   => gettext("Shell"),
            "enabled" => boolval($object['enable']),
            "running" => ($initd->status() == 0)
        );
    }

    /**
     * Bind listeners
     */
    function bindListeners(OMVNotifyDispatcher $dispatcher) {
        $dispatcher->addListener(
            OMV_NOTIFY_MODIFY,
            "org.openmediavault.system.shell",
            array($this, "setDirty"));
        $dispatcher->addListener(
            OMV_NOTIFY_MODIFY,
            "org.openmediavault.webadmin",
            array($this, "setDirty"));
    }
}

// Register module.
$moduleMgr = &OMVModuleMgr::getInstance();
$moduleMgr->registerModule(new OMVModuleShell());
?>
