<?php
/**
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Volker Theile <volker.theile@openmediavault.org>
 * @copyright Copyright (c) 2009-2013 Volker Theile
 * @copyright Copyright (c) 2013-2014 OpenMediaVault Plugin Developers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
require_once("openmediavault/object.inc");
require_once("openmediavault/error.inc");
require_once("openmediavault/functions.inc");
require_once("openmediavault/rpcservice.inc");
require_once("openmediavault/notify.inc");
require_once("openmediavault/module.inc");

class OMVRpcServiceShell extends OMVRpcServiceAbstract {
    /**
     * Get the RPC service name.
     */
    public function getName() {
        return "Shell";
    }

    /**
     * Initialize the RPC service.
     */
    public function initialize() {
        $this->registerMethod("getSettings");
        $this->registerMethod("setSettings");
        $this->registerMethod("getStatus");
    }

    /**
     * Get settings.
     * @param params The method parameters.
     * @param context The context of the caller.
     * @return The requested configuration object.
     * @throw
     * @throw E_CONFIG_GET_OBJECT_FAILED
     */
    function getSettings($params, $context) {
        global $xmlConfig;

        // Validate the RPC caller context.
        $this->validateMethodContext($context, array( "role" => OMV_ROLE_ADMINISTRATOR ));

        // Get the configuration object.
        $xpath = "//system/shell";
        $object = $xmlConfig->get($xpath);
        if(is_null($object))
            throw new OMVException(OMVErrorMsg::E_CONFIG_GET_OBJECT_FAILED, $xpath);

        // Modify the result object.
        $object['enable'] = boolval($object['enable']);
        $object['enablebeep'] = boolval($object['enablebeep']);
        $object['enabletermsettings'] = boolval($object['enabletermsettings']);
        $object['fontsize'] = intval($object['fontsize']);

        return $object;
    }

    /**
     * Set settings.
     * @param params The method parameters.
     * @param context The context of the caller.
     * @return The stored configuration object.
     * @throw E_CONFIG_SET_OBJECT_FAILED
     */
    function setSettings($params, $context) {
        global $xmlConfig;

        // Validate the RPC caller context.
        $this->validateMethodContext($context, array( "role" => OMV_ROLE_ADMINISTRATOR ));

        // Validate the parameters of the RPC service method.
        $this->validateMethodParams($params, '{
            "type"       : "object",
            "properties" : {
                "enable"             : { "type" : "boolean"},
                "linkify"            : { "type" : "string"},
                "enablebeep"         : { "type" : "boolean"},
                "enabletermsettings" : { "type" : "boolean"},
                "fontfamily"         : { "type" : "string"},
                "fontsize"           : { "type" : "integer", "minimum" : 1, "maximum" : 72}
            }
        }');

        // Prepare configuration objects
        $object = array(
            "enable"             => array_boolval($params, 'enable'),
            "linkify"            => $params['linkify'],
            "enablebeep"         => array_boolval($params, 'enablebeep'),
            "enabletermsettings" => array_boolval($params, 'enabletermsettings'),
            "fontfamily"         => $params['fontfamily'],
            "fontsize"           => $params['fontsize']
        );
        // Set the configuration object.
        $xpath = "//system/shell";
        if(FALSE === $xmlConfig->replace($xpath, $object))
            throw new OMVException(OMVErrorMsg::E_CONFIG_SET_OBJECT_FAILED);

        // Notify configuration changes.
        $dispatcher = &OMVNotifyDispatcher::getInstance();
        $dispatcher->notify(OMV_NOTIFY_MODIFY,
            "org.openmediavault.system.shell",
            $object);

        // Return the configuration object.
        return $object;
    }

    function getStatus($params, $context) {
        $moduleMgr = &OMVModuleMgr::getInstance();
        $module = $moduleMgr->getModule("shell");

        return $module->getStatus();
    }
}

// Register the RPC service.
$rpcServiceMgr = &OMVRpcServiceMgr::getInstance();
$rpcServiceMgr->registerService(new OMVRpcServiceShell());
?>
